#if !canImport(ObjectiveC)
import XCTest

extension RegexFindAllTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexFindAllTests = [
        ("testRegexFindAll1", testRegexFindAll1),
        ("testRegexFindAll2", testRegexFindAll2),
        ("testRegexFindAll3", testRegexFindAll3),
        ("testRegexFindAllDocs1", testRegexFindAllDocs1),
        ("testRegexFindAllDocs2", testRegexFindAllDocs2),
    ]
}

extension RegexMatchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexMatchTests = [
        ("testRegexMatchAllParameters", testRegexMatchAllParameters),
        ("testRegexMatchDetails", testRegexMatchDetails),
        ("testRegexMatchDocs1", testRegexMatchDocs1),
        ("testRegexMatchDocs2", testRegexMatchDocs2),
        ("testRegexMatchName", testRegexMatchName),
        ("testRegexMatchURL", testRegexMatchURL),
        ("testRegexMatchWithFuzzing", testRegexMatchWithFuzzing),
        ("testRegexMatchWithRange", testRegexMatchWithRange),
    ]
}

extension RegexNamedGroupsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexNamedGroupsTests = [
        ("testNamedGroups_ShouldThrow", testNamedGroups_ShouldThrow),
        ("testNamedGroups", testNamedGroups),
    ]
}

extension RegexObjectsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexObjectsTests = [
        ("testPatternIsValidAndNumberOfCaptureGroups", testPatternIsValidAndNumberOfCaptureGroups),
        ("testReplaceCaptureGroups", testReplaceCaptureGroups),
    ]
}

extension RegexReplacerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexReplacerTests = [
        ("testCaptureGroupReplacerDocs", testCaptureGroupReplacerDocs),
        ("testCapturreGroupReplacing", testCapturreGroupReplacing),
        ("testReplacing", testReplacing),
        ("testReplacingDocs2", testReplacingDocs2),
        ("testReplacingDocs3", testReplacingDocs3),
        ("testReplacingMatchAndCaptureGroupsDocs", testReplacingMatchAndCaptureGroupsDocs),
        ("testReplacingShort", testReplacingShort),
    ]
}

extension RegexSplitTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexSplitTests = [
        ("testRegexSplit", testRegexSplit),
        ("testRegexSplitsComma", testRegexSplitsComma),
        ("testRegexSplitWithEmpty", testRegexSplitWithEmpty),
        ("testRegexSplitWithOptions", testRegexSplitWithOptions),
    ]
}

extension RegexSubTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexSubTests = [
        ("testRegexSub", testRegexSub),
        ("testRegexSubDocs2", testRegexSubDocs2),
        ("testRegexSubDocs", testRegexSubDocs),
        ("testRegexSubInPlace", testRegexSubInPlace),
        ("testRegexSubMatchOptionsDocs", testRegexSubMatchOptionsDocs),
        ("testRegexSubSearchRange", testRegexSubSearchRange),
        ("testRegexSubTemplates", testRegexSubTemplates),
    ]
}

extension RegexSwitchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexSwitchTests = [
        ("testRegexSwitch1", testRegexSwitch1),
        ("testRegexSwitch2", testRegexSwitch2),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(RegexFindAllTests.__allTests__RegexFindAllTests),
        testCase(RegexMatchTests.__allTests__RegexMatchTests),
        testCase(RegexNamedGroupsTests.__allTests__RegexNamedGroupsTests),
        testCase(RegexObjectsTests.__allTests__RegexObjectsTests),
        testCase(RegexReplacerTests.__allTests__RegexReplacerTests),
        testCase(RegexSplitTests.__allTests__RegexSplitTests),
        testCase(RegexSubTests.__allTests__RegexSubTests),
        testCase(RegexSwitchTests.__allTests__RegexSwitchTests),
    ]
}
#endif
